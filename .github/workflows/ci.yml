name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'compiler/**'
      - 'Cargo.toml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'compiler/**'
      - 'Cargo.toml'
      - '.github/workflows/ci.yml'

env:
  LLVM_BRANCH: release/20.x
  LLVM_INSTALL_PATH_UNIX: ${{ github.workspace }}/llvm-install
  LLVM_INSTALL_PATH_WINDOWS: ${{ github.workspace }}\llvm-install
  RUST_BACKTRACE: 1


jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # -------------------------------
      # Install dependencies
      # -------------------------------
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y tar cmake ninja-build

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install ninja

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install cmake ninja

      # -------------------------------
      # Restore LLVM cache
      # -------------------------------
      - name: Restore LLVM cache (Linux/macOS)
        id: cache-llvm-restore-unix
        if: runner.os != 'Windows'
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.LLVM_INSTALL_PATH_UNIX }}
          key: ${{ runner.os }}-${{ runner.arch }}-llvm-${{ env.LLVM_BRANCH }}

      - name: Restore LLVM cache (Windows)
        id: cache-llvm-restore-windows
        if: runner.os == 'Windows'
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.LLVM_INSTALL_PATH_WINDOWS }}
          key: ${{ runner.os }}-${{ runner.arch }}-llvm-${{ env.LLVM_BRANCH }}

      # -------------------------------
      # Build LLVM if cache missed
      # -------------------------------
      - name: Build LLVM (Linux/macOS)
        if: steps.cache-llvm-restore-unix.outputs.cache-hit != 'true' && runner.os != 'Windows'
        shell: bash
        run: |
          git clone --depth 1 --branch ${{ env.LLVM_BRANCH }} https://github.com/llvm/llvm-project.git
          cd llvm-project
          cmake -S llvm -B build -G Ninja \
            -DCMAKE_INSTALL_PREFIX=${{ env.LLVM_INSTALL_PATH_UNIX }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="clang;lld" \
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64"
          ninja -C build install

      - name: Build LLVM (Windows)
        if: steps.cache-llvm-restore-windows.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash
        run: |
          git clone --depth 1 --branch ${{ env.LLVM_BRANCH }} https://github.com/llvm/llvm-project.git
          cd llvm-project
          cmake -S llvm -B build -G Ninja \
            -DCMAKE_INSTALL_PREFIX=${{ env.LLVM_INSTALL_PATH_WINDOWS }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="clang;lld" \
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64"
          ninja -C build install

      # -------------------------------
      # Ensure cache path exists (important for saving even if build fails)
      # -------------------------------
      - name: Ensure LLVM cache path exists
        if: always()
        run: mkdir -p ${{ env.LLVM_INSTALL_PATH_UNIX }}
        shell: bash

      - name: Ensure LLVM cache path exists (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path $env:LLVM_INSTALL_PATH_WINDOWS

      # -------------------------------
      # Save LLVM cache always
      # -------------------------------
      - name: Save LLVM cache (Linux/macOS)
        if: always() && runner.os != 'Windows'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.LLVM_INSTALL_PATH_UNIX }}
          key: ${{ runner.os }}-${{ runner.arch }}-llvm-${{ env.LLVM_BRANCH }}

      - name: Save LLVM cache (Windows)
        if: always() && runner.os == 'Windows'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.LLVM_INSTALL_PATH_WINDOWS }}
          key: ${{ runner.os }}-${{ runner.arch }}-llvm-${{ env.LLVM_BRANCH }}
      
      # -------------------------------
      # Install Rust toolchain
      # -------------------------------
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal


      # -------------------------------
      # Set LLVM_SYS_201_PREFIX environment variable for llvm-sys crate
      # -------------------------------
      - name: Set LLVM_SYS_201_PREFIX (Linux/macOS)
        if : runner.os != 'Windows'
        shell: bash
        run: |
          echo "LLVM_SYS_201_PREFIX=${{ env.LLVM_INSTALL_PATH_UNIX }}" >> $GITHUB_ENV

      
      - name: Set LLVM_SYS_201_PREFIX (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "LLVM_SYS_201_PREFIX=${{ env.LLVM_INSTALL_PATH_WINDOWS }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # -------------------------------
      # Add LLVM to PATH
      # -------------------------------
      - name: Add LLVM to path (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: echo "${{ env.LLVM_INSTALL_PATH_UNIX }}/bin" >> $GITHUB_PATH

      - name: Add LLVM to path (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "${{ env.LLVM_INSTALL_PATH_WINDOWS }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # -------------------------------
      # Build and test Rust project
      # -------------------------------
      - name: Build project
        if: always()
        run: cargo build --verbose

      - name: Run tests
        if: always()
        run: cargo test --verbose

      - name: Run clippy
        if: always()
        run: cargo clippy -- -D warnings

      - name: Check formatting
        if: always()
        run: cargo fmt -- --check
